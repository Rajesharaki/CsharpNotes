1) Why do we need Design Patterns?

* How to properly create a class
* How to interact between object
* How to write LooseCoupling code
* How to write Reusable Code

2) What is Design Pattern?

* A Well Defind solution to a Common Problem
* Industry Standard Apporpach
* Template, Not a solution
* Language Independent

3)Benfits of Design Pattern?

* Robust code
* Code Reusability
* Highly Maintainability
* We can achive loose coupling application

4)Types Of Design Pattern?S

1.Structural Design Pattern Ex:Adapter,Facade,Bridge/-
2.Creational Design Pattern Ex:Singleton,Factory,Bridge Etc/-
3.Behaviour Design Pattern Ex:Strategy,Observer,iterator Etc/-

5)Best Practice in Design Pattern

*Keep it simple
*Excess of everything is abd
*Focus on loose coupled code

Creational Design Pattern: 
--------------------------
Creational design patterns are design patterns that deal with object creation mechanisum
-->Singleton Pattern:
----------------------
                     If we need a class to have to only one project,then we use the singleton Pattern.

Advantages Of Singleton Pattern:
--------------------------------
* If several people have same requirement then it is not recommanded to create a separate object for
  every requirement. 
* we have to create only one object and we can reuse same object for every similar requirement so that performance and
  memory utilization will be improved

Class is not final but we are not allowed to create any child class:
----------------------------------------------------------------------
* Make constructor private.

Singleton Pattern:
-----------------
*Singleton pattern restricts the instantiation of a class and ensures that only one instance of the class exists..
*The singleton class must provide a global access point to get the instance of the class.
*Singleton pattern is used for logging, drivers objects, caching and thread pool.
*Singleton design pattern is also used in other design patterns like Abstract Factory, Builder, Prototype, Facade etc.
*Singleton design pattern is used in core java classes also, for example java.lang.Runtime, java.awt.Desktop.

Singleton Pattern implememntation:
----------------------------------
To implement a Singleton pattern, we have different approaches but all of them have the following common concepts.

*Private constructor to restrict instantiation of the class from other classes.
*Private static variable of the same class that is the only instance of the class.
*Public static method that returns the instance of the class, this is the global access point for outer world to get the instance of the singleton class.

Different approaches of Singleton pattern implementation and design concerns with the implementation.
-----------------------------------------------------------------------------------------------------
1.Eager initialization
2.Static block initialization
3.Lazy Initialization
4.Thread Safe Singleton
5.Bill Pugh Singleton Implementation
6.Using Reflection to destroy Singleton Pattern

1.Eager initialization:
------------------------
In eager initialization, the instance of Singleton Class is created at the time of class loading, this is the easiest method to create a singleton class 
but it has a drawback that instance is created even though client application might not be using it.

Ex:
   public class EagerInitializedSingleton {
    
    private static final EagerInitializedSingleton instance = new EagerInitializedSingleton();
    
    //private constructor to avoid client applications to use constructor
    private EagerInitializedSingleton(){}

    public static EagerInitializedSingleton getInstance(){
        return instance;
    }

Note:
If your singleton class is not using a lot of resources, this is the approach to use. 
But in most of the scenarios, Singleton classes are created for resources such as File System, Database connections, etc.
We should avoid the instantiation until unless client calls the getInstance method. Also, this method doesn’t provide any options for exception handling.

2.Static block initialization:
------------------------------
static block initialization implementation is similar to eager initialization, except that instance of class is created in the static block 
that provides option for exception handling.

Ex:
public class StaticBlockSingleton {

    private static StaticBlockSingleton instance;
    
    private StaticBlockSingleton(){}
    
    //static block initialization for exception handling
    static{
        try{
            instance = new StaticBlockSingleton();
        }catch(Exception e){
            throw new RuntimeException("Exception occured in creating singleton instance");
        }
    }
    
    public static StaticBlockSingleton getInstance(){
        return instance;
    }
}

*Both eager initialization and static block initialization creates the instance even before it’s being used and 
that is not the best practice to use.

3.Lazy Initialization:
----------------------
Lazy initialization method to implement Singleton pattern creates the instance in the global access method. 
Here is the sample code for creating Singleton class with this approach.

Ex:
public class LazyInitializedSingleton {

    private static LazyInitializedSingleton instance;
    
    private LazyInitializedSingleton(){}
    
    public static LazyInitializedSingleton getInstance(){
        if(instance == null){
            instance = new LazyInitializedSingleton();
        }
        return instance;
    }
}

*The above implementation works fine in case of the single-threaded environment but when it comes to multithreaded systems, 
it can cause issues if multiple threads are inside the if condition at the same time. It will destroy the singleton pattern and both threads 
will get the different instances of the singleton class

4.Thread Safe Singleton :
---------------------------
The easier way to create a thread-safe singleton class is to make the global access method synchronized, so that only one thread can execute this method at a time.
General implementation of this approach is like the below class.

package com.journaldev.singleton;

public class ThreadSafeSingleton {

    private static ThreadSafeSingleton instance;
    private static Object obj=new Object();
    
    private ThreadSafeSingleton(){}
    
    public static synchronized ThreadSafeSingleton getInstance(){
	      lock(obj)
      {
            if(instance == null){
            instance = new ThreadSafeSingleton();
        }
        return instance;
      }
    }
    
}
Above implementation works fine and provides thread-safety but it reduces the performance because of the cost associated with the synchronized method,
although we need it only for the first few threads who might create the separate instances (Read: Java Synchronization).
To avoid this extra overhead every time, 
double checked locking principle is used. In this approach, the synchronized block is used inside the if condition with an additional check to ensure that only one instance of a singleton class is created.

-->DoublyCheckedLocking:
------------------------
 *If we use synchronize method the application performance will be reduce because of this reason we go for doubly checked singleton.

Ex:
---
public static ThreadSafeSingleton getInstanceUsingDoubleLocking(){
    if(instance == null){
        synchronized (ThreadSafeSingleton.class) {
            if(instance == null){
                instance = new ThreadSafeSingleton();
            }
        }
    }
    return instance;
}

5.Bill Pugh Singleton Implementation:
-------------------------------------
Prior to Java 5, java memory model had a lot of issues and the above approaches used to fail in certain scenarios where too many threads try to get the instance of the
Singleton class simultaneously. So Bill Pugh came up with a different approach to create the Singleton class using an inner static helper class. 
The Bill Pugh Singleton implementation goes like this;

package com.journaldev.singleton;

public class BillPughSingleton {

    private BillPughSingleton(){}
    
    private static class SingletonHelper{
         static final BillPughSingleton INSTANCE = new BillPughSingleton();
    }
    
    public static BillPughSingleton getInstance(){
        return SingletonHelper.INSTANCE;
    }
}
Notice the private inner static class that contains the instance of the singleton class. When the singleton class is loaded, SingletonHelper class is not loaded into 
memory and only when someone calls the getInstance method, this class gets loaded and creates the Singleton class instance.
This is the most widely used approach for Singleton class as it doesn’t require synchronization. 

6.Using Reflection to destroy Singleton Pattern:
------------------------------------------------
Reflection can be used to destroy all the above singleton implementation approaches. Let’s see this with an example class.

Ex:
---
 sealed class Reflection
    {
        private Reflection()
        {
            if (ReflectionHelperClass.Instance != null)
            {
                throw new Exception("Excecption occured in creating Singleton object");
            }
        }
        public static Reflection GetInstance
        {
            get
            {
                return ReflectionHelperClass.Instance;
            }
        }
        private sealed class ReflectionHelperClass
        {
            public static Reflection Instance = new Reflection();
        }
    }


-->Factory Design Pattern:
--------------------------
* by using factory method to deals with problem of creting object without having a spcify the exact class of the object that will be created        
* The type of objects created will be decided by a separate factory class.
* The Factory design pattern is used when we have a Superclass with multiple sub classes and based on input
  ,we need to return one of the sub class.This pattern takes out the responsibility of the Instatiation of a class from the client program to the factory class

-->Prototype Design Pattern:
-----------------------------
 * Prototype Design pattern soecify the kind of objects to create using a prototypical instance, and create new object by copying this prototype.
                                                  (OR)
 * Instead of creating object from scratch every time,you can make copies of an original instance and modified it as required.
 * Prototype is unique among the other creational patterns as it doesn't require a class but only an end object

When we choose Prototype Design Pattern:
----------------------------------------
*Creating an object is an expensive operation and it would be more efficent to copy an object.
*system should be independent of how its products are created,composed,and represented.
*Objects are required that similar to existing objects.
*we need to hide the complexity of creating new instance from the client.

Shallow cloning and Deep clonning:
----------------------------------
* When the parent object are cloned with their containing objects it's called Deep clonning
* when only parent is clones its termed as Shallow clonning.







































