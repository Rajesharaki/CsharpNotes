AutoMapper:
-----------
* Auto mapper is nothing but mapping one object to anthoer
                        or
* Copy or transfer  the data from one class object to another class object


Reflection:
-----------
Reflection is the ability of inspecting an assemblies metadata at runtime.it is used to find all tyPes in an assembly and or dynamically invoke 
methos in an assembly.

Uses of Reflection:
-------------------
1. When you drag and drop a button on a win forms or an asp.net application. The properties window uses reflection to show all the properties of the
Button class . So reflection is extensively used by IDE or a UI designers

2.Late binding can be achived by using reflection.You can use reflection to dyanmically create an instance of a type,about which we don't have any information
at compile time . So ,reflection enables you to use code that is not available at compile time.

3.Consider an Example where we have two alternate implementation of an interface. You want to allow the user to pick one or the other using a config file.
with reflection you can simply read the name of the class whose implementation you want to use from the config file, and instantiate an instance of that class.
this is another example for late binding using reflection.

EX:
---
 public class Custmor
    {
        public string EmployeeName;
        public string CompanyName;
        public long PhoneNumber;
        public string ID { get; set; }
        public Custmor()
        {

        }
        public Custmor(string Employee, string CompanyName, long PhoneNumber)
        {
            this.EmployeeName = Employee;
            this.CompanyName = CompanyName;
            this.PhoneNumber = PhoneNumber;
        }
        public string GetCompany()
        {
            return this.CompanyName;
        }
        public  void PrintName()
        {
            Console.WriteLine(this.EmployeeName);
        }
        public long GetNumber(long PhoneNumber)
        {
            return this.PhoneNumber;
        }
    }
    public class Reflection
    {
        //Refelction is used for inspecting the assembly metadata
        static void Main()
        {
            Type t = Type.GetType("DesignPatterns.Reflection.Custmor");
            Console.WriteLine("Get Fields....................\n");
            FieldInfo[] fields=t.GetFields();
            foreach (FieldInfo field in fields)
            {
                Console.WriteLine(field.ToString());
            }
            Console.WriteLine("\nGetProperties................ ");
            Console.WriteLine(t.GetProperty("ID"));
            Console.WriteLine("\nGetMethods.............................\n");
            MethodInfo[] methods = t.GetMethods();
            foreach (MethodInfo method in methods)
            {
                Console.WriteLine(method.ToString());
            }
            Console.WriteLine("\nConstructors..............................\n");
            ConstructorInfo [] Constructors=t.GetConstructors();
            foreach(ConstructorInfo Constructor in Constructors)
            {
                Console.WriteLine(Constructor.ToString());
            }
        }
    }

Dependency Injection:
---------------------
* Dependency injection is a Techinque where by one object supplies the dependencies of another object

Different Types of Dependency Injection in C#
---------------------------------------------
We can implement the Dependency Injection in C# in three different ways. They are as follows.

Constructor Injection:
----------------------
 When we supply the dependency object through the client class constructor, then it is called as Constructor Injection.

Property Injection:
-------------------
 When we supply the dependency object through the public property of the client class, then it is called as Property Injection.

Method Injection:
-----------------
When we supply the dependency object through a public method of the client class, then it is called as Method Injection.

Inversion of Control:
---------------------
A Class should not configure its dependencies statically but should be configured by some other class from outside.

































