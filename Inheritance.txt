Inheritance:
------------
Inherit the state and behovioues from one class to another class it's called inheritance.

-->By using inheritance we can avoid the code repetation.
-->we can't inherit sealed class and final class.

there are 5 types of inheritance
---------------------------------
1.Single Inheritance
2.Multiple Inheritance
3.Hierarchical Inheritance 
4.MultiLevel Inheritance
5.Hybrid Inheritance

1.Single Inheritance:
                     One child class extends one parent class

2.Multiple Inheritance:
                     one child class extends Parent class again another child class extends Already derived child class.

3.Hierarchical Inheritance:
                     Two child class extends one parent class

4.MultiLevel Inheritance:
                     One child class Extends two parent class.

  -->this type of inheritance is possible only in inheritance.
  -->this type of Inheritance is not Possible in class due to
       *Ambiguting in Constractor chaining
       *Method duplication is Possible in this type of Inheiritance

5.Hybrid Inheritance:
                   It's combination of Multiple and hierarchical Inheritance

-->By using superclass refence we can create sub class object and by using super class refence we can access only 
   super class member 

ex:
class Super
{
   public void MethodA()
   {
      Console.writeLine("Super class Method");
   }
}
class SubClass:Super
{
   public void MethodB() 
   { 
     Console.WriteLine("Subclass Method");
   }
}
class Test
{
  p s v m(String[] args)
  {
     Super s=new SubClass();
     s.MethodA();// by using super class refence we create subclass object and we can access only subclass object method which are return super class 
                   data types check :if we override any method from super class to sub class then by using super class refence we access sub class method mot super class method
     //By type casting we can access Method B also
     (SubClass)s.MethodB();
  }
}
o/p: super class method

class Super
{
   public virtual void MethodA()
   {
      Console.writeLine("Super class Method");
   }
}
class SubClass:Super
{
   public override void MethodA()
   {
     Cosnsole.WriteLine("Override method");
   }
   public void MethodB() 
   { 
     Console.WriteLine("Subclass Method");
   }
}
class Test
{
  p s v m(String[] args)
  {
     Super s=new SubClass();
     s.MethodA();
  }
}

o/p: override method
                  
















